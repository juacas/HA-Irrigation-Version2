# lovelace_gen

#==============================
#=== Cycle Schedule Start Time
#==============================
type: custom:button-card
entity: {{ entity }}
triggers_update: 
  - sensor.irrigation_cycle{{ cycle }}_duration_in_seconds
  - input_boolean.irrigation_cycle{{ cycle }}_adjust_for_temperature
  - input_boolean.irrigation_cycle{{ cycle }}_adjust_for_rainfall
  - input_select.irrigation_cycle{{ cycle }}_start_time_type
name: >
  [[[
    var start_time = new Date(null);
    var start_time_seconds = parseInt(entity.state);

    start_time.setSeconds(start_time_seconds);
    
    return "Start Time: " + start_time.toISOString().substr(11, 5);    
  ]]]
show_label: true
icon: mdi:theme-light-dark
show_icon: true
label: >
  [[[
    var cycle = '{{ cycle }}';
    var end_time = new Date(null);
    var start_time = parseInt(states['sensor.irrigation_cycle' + cycle + '_start_time_in_seconds'].state);
    var duration = parseInt(states['sensor.irrigation_cycle' + cycle + '_duration_in_seconds'].state);
    var total_seconds = start_time + duration;

    end_time.setSeconds(total_seconds);
    return "<br>Duration " + duration;
    return "<br>(Will end about " + end_time.toISOString().substr(11, 5) + ")";    
  ]]]
color: var(--paper-item-icon-active-color)
size: 60%
styles:
  grid:
    - grid-template-areas: '"n i" "l l"'
    - grid-template-columns: min-content 15%
    - grid-template-rows: 1fr min-content
  card:
    # - height: 3.25em
    - margin-top: -0.25em
    - margin-bottom: -1em
    - margin-left: 0.75em
    - box-shadow: none
    - background: none
    - font-family: >
        [[[
          return states['input_text.irrigation_ui_font_family'].state
        ]]]
  name:
    - align-self: start
    - padding-bottom: 0em
  label:
    - position: relative
    - top: -0.75em
    - justify-self: start
    - font-size: 11px
    - padding: 0em 0em 0em 0em
  icon:
    - display: >
        [[[
          var cycle = '{{ cycle }}';
          var type = states['input_select.irrigation_cycle' + cycle + '_start_time_type'].state;
          if (type == 'Actual Time')      
            return 'none';
          else return '';
        ]]]
tap_action:
  action: call-service
  service: browser_mod.popup
  service_data:
    title: >
      [[[
        var entity_id = 'input_text.irrigation_cycle{{ cycle }}_name';
        return states[entity_id].state.toUpperCase() + ' SCHEDULE';
      ]]]
    hide_header: true
    card:
      type: entities
      entities:
        - entity: input_select.irrigation_cycle{{ cycle }}_start_time_type
          name: ' '
          icon: mdi:dummy
        - type: custom:hui-element
          card_type: conditional
          conditions:
            - entity: input_select.irrigation_cycle{{ cycle }}_start_time_type
              state: Actual Time
          card:
            type: custom:time-picker-card
            entity: input_datetime.irrigation_cycle{{ cycle }}_start_time
            name: Start Time
            layout:
              name: inside
        - type: custom:hui-element
          card_type: conditional
          conditions:
            - entity: input_select.irrigation_cycle{{ cycle }}_start_time_type
              state: Sunrise Offset
          card:
            type: entities
            entities:
              - entity: input_number.irrigation_cycle{{ cycle }}_start_time_sunrise_offset
                name: Offset in minutes
        - type: custom:hui-element
          card_type: conditional
          conditions:
            - entity: input_select.irrigation_cycle{{ cycle }}_start_time_type
              state: Sunset Offset
          card:
            type: entities
            entities:
              - entity: input_number.irrigation_cycle{{ cycle }}_start_time_sunset_offset
                name: Offset in minutes
    deviceID:
      - this
    # style:
    #   font-family: >
    #     [[[
    #       return states['input_text.irrigation_ui_font_family'].state
    #     ]]]
    #   box-shadow: 0em 0em 0.5em
    #   border-radius: 1em
    #   overflow: hidden
    #   opacity: 0.9

    style:
      $: |
        .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
          border-radius: 1em;
          box-shadow: 0em 0em 0.5em;
        }
      .: |
        :host {
          --mdc-theme-surface: rgba(0,0,0,0);
          --ha-card-background: var(--paper-dialog-background-color);
          --secondary-background-color: var(--paper-dialog-background-color);
      opacity: 0.9;
        }
